generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id              String          @id @default(uuid())
  employeeId      String          @unique
  name            String
  email           String?         @unique
  isAdmin         Boolean         @default(false)
  designation     String?
  profilePhotoUrl String?
  password        String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  leaveBalances   LeaveBalance[]
  leaveRequests   LeaveRequest[]
  notifications   Notification[]
  approvedLeaves  LeaveRequest[]  @relation("ApprovedBy")
}

model LeaveType {
  id             String         @id @default(uuid())
  name           String
  createdAt      DateTime       @default(now())
  leaveBalances  LeaveBalance[]
  leaveRequests  LeaveRequest[]
}

model LeaveBalance {
  id             String    @id @default(uuid())
  userId         String
  leaveTypeId    String
  balance        Int
  totalAllocated Int
  year           Int
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  leaveType      LeaveType @relation(fields: [leaveTypeId], references: [id], onDelete: Cascade)

  @@unique([userId, leaveTypeId, year])
}

model LeaveRequest {
  id           String        @id @default(uuid())
  userId       String
  leaveTypeId  String
  startDate    DateTime
  endDate      DateTime
  reason       String
  status       String        @default("Pending")
  requestedAt  DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  approvedById String?
  adminRemarks String?
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  leaveType    LeaveType     @relation(fields: [leaveTypeId], references: [id], onDelete: Cascade)
  approvedBy   User?         @relation("ApprovedBy", fields: [approvedById], references: [id])
  notifications Notification[]
}

model Notification {
  id              String       @id @default(uuid())
  userId          String
  message         String
  type            String
  read            Boolean      @default(false)
  link            String?
  requestId       String?
  createdAt       DateTime     @default(now())
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  leaveRequest    LeaveRequest? @relation(fields: [requestId], references: [id], onDelete: Cascade)
}